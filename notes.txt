# TODO:
# - run process order in a while loop until user signifies they are done / pays
#   - don't send full menu each time, only initial request. With saved context we could
#     just save the menu in saved model state for each context
# - add an extra notes section to each menu item the user requests
# - add a "special instructions" section to the end of the order
# - repeat this all back to the user and ask if it's correct
# - build a function for "is user done with order"
# - Better listening/voice software
     - Whisper API
     - other open source libraries
# - Build by appending messages so GPT has a better understanding of past convo
    eg. 
    import openai

    openai.ChatCompletion.create(
    model="gpt-3.5-turbo",
    messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": "Who won the world series in 2020?"},
            {"role": "assistant", "content": "The Los Angeles Dodgers won the World Series in 2020."},
            {"role": "user", "content": "Where was it played?"}
        ]
    )


#TODO
- Implement order finalization
- Implement order updating
- Implement Scraping with function calls 
- Start with chineese food restaurant
- Add prompts as system messages 

# TODO 11/24
- Cut short when user speaks???
- add background loop noise???
- Customers:
    - chick-fil-a tech forward
    - chineese food
- Add Priced Order Details to Order Models
    - current idea is to break each menu item into categories and have a list of:
    - 1. options that define the base pric
    - 2. whether or not the options are required (maybe if there is no total price its implied)
    - 3. add ons that are purely optional and added to the total price
    - 4. unpriced details the order
